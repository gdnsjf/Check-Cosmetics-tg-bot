import logging
import asyncio
import nest_asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import joblib
import pytesseract
from PIL import Image
import re
from io import BytesIO

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å event loop
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
def custom_tokenizer(text):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—è—Ç—ã–º
    tokens = re.split(r',\s*', text)
    return tokens

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
model = joblib.load('cosmetic_safety_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

# –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def clean_and_format_text(text):
    text = text.lower()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ "aqua" –∏–ª–∏ "water"
    match = re.search(r'\baqua|water\b', text)
    if match:
        text = text[match.start():]

    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'[^a-zA-Z0-9,\s\-]', '', text)

    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
    text = re.sub(r'\s+', ' ', text).strip()

    return text

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_text_from_image(image):
    img = Image.open(image)
    return pytesseract.image_to_string(img)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_image(update: Update, context: CallbackContext) -> None:
    photo = await update.message.photo[-1].get_file()
    photo_bytes = BytesIO(await photo.download_as_bytearray())

    raw_text = extract_text_from_image(photo_bytes)
    clean_text = clean_and_format_text(raw_text)
    ingredients = custom_tokenizer(clean_text)

    total_ingredients = len(ingredients)
    rating_0_2 = 0
    rating_3_6 = 0
    rating_7_10 = 0

    result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:\n"

    for ingredient in ingredients:
        ingredient_vector = vectorizer.transform([ingredient.strip()])
        prediction = model.predict(ingredient_vector)

        if prediction[0] == 2:
            result_message += f'‚ö†Ô∏è {ingredient.strip()} \n'
            rating_7_10 += 1
        elif prediction[0] == 1:
            result_message += f'üü° {ingredient.strip()}\n'
            rating_3_6 += 1
        else:
            result_message += f'‚úÖ {ingredient.strip()}\n'
            rating_0_2 += 1

    percent_0_2 = (rating_0_2 / total_ingredients) * 100
    percent_3_6 = (rating_3_6 / total_ingredients) * 100
    percent_7_10 = (rating_7_10 / total_ingredients) * 100

    if rating_7_10 > 0:
        result_message += "\n‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
    elif percent_0_2 >= 80 and percent_3_6 <= 15:
        result_message += "\n‚úÖ –ü—Ä–æ–¥—É–∫—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
    else:
        result_message += "\n‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏."

    await update.message.reply_text(result_message)
    await update.message.reply_text('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞!')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f'Update "{update}" caused error "{context.error}"')

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    TOKEN = "YOUR_BOT_TOKEN"
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
